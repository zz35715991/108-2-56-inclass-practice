"૫"<-5
"૬"<-6
"૭"<-7
"૮"<-8
"૯"<-9
as.numeric(numerals_Gujarati)
sum(numerals_Gujarati)
"૧"<-1
"૨"<-2
"૩"<-3
"૪"<-4
"૫"<-5
"૬"<-6
"૭"<-7
"૮"<-8
"૯"<-9
sum(receipts300[1:30])
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr)
source("https://www.dropbox.com/s/tv16xt8mv11cli7/gujarati.R?dl=1")
print(receipts300[1:30]) # 印前30張
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
View(poem_song)
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
post$comments$gender <- as.factor(post$comments$gender)
post$comments$hearts <- as.integer(post$comments$hearts)
# post
install.packages("rvest")
poem_song[[22]]$paragraphs[4]<-"喜聞何力語，應為樂秋豐。"
str(poem_song[[22]])
# poem_song
a <- "我叫"
b <- c("小明","阿美")
paste0(a,b)
poem_song[[136]]<-poem_new
# poem_song
View(post)
poem_song[[1]]
# poem_song
"૧"<-1
"૨"<-2
"૩"<-3
"૪"<-4
"૫"<-5
"૬"<-6
"૭"<-7
"૮"<-8
"૯"<-9
sum(receipts300[1:30])
"૧"<-1
"૨"<-2
"૩"<-3
"૪"<-4
"૫"<-5
"૬"<-6
"૭"<-7
"૮"<-8
"૯"<-9
as.numeric(receipts300[1:30])
sum(receipts300[1:30])
"૧"<-1
"૨"<-2
"૩"<-3
"૪"<-4
"૫"<-5
"૬"<-6
"૭"<-7
"૮"<-8
"૯"<-9
sum(૯,૮)
"૧"<-1
"૨"<-2
"૩"<-3
"૪"<-4
"૫"<-5
"૬"<-6
"૭"<-7
"૮"<-8
"૯"<-9
sum(numerals_Gujarati)
"૧"<-1
"૨"<-2
"૩"<-3
"૪"<-4
"૫"<-5
"૬"<-6
"૭"<-7
"૮"<-8
"૯"<-9
as.integer(receipts300)
sum(numerals_Gujarati)
"૧"<-1
"૨"<-2
"૩"<-3
"૪"<-4
"૫"<-5
"૬"<-6
"૭"<-7
"૮"<-8
"૯"<-9
as.numeric_version(receipts300)
sum(receipts300)
library(lubridate)
a <- "2020年"
post$category_dateTime[[2]] <- paste0(a, post$category_dateTime[[2]])
post$category_dateTime[[2]] <- ymd_hm(post$category_dateTime[[2]], tz="Asia/Taipei")
# post
library(lubridate)
a <- "2020年"
post$category_dateTime[[2]] <- paste0(a, post$category_dateTime[[2]])
post$category_dateTime[[2]] <- ymd_hm(post$category_dateTime[[2]], tz="Asia/Taipei")
# post
library(lubridate)
a <- "2020年"
post$category_dateTime[[2]] <- paste0(a, post$category_dateTime[[2]])
post$category_dateTime[[2]] <- ymd_hm(post$category_dateTime[[2]], tz="Asia/Taipei")
# post
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
post$comments$gender <- as.factor(post$comments$gender)
post$comments$hearts <- as.integer(post$comments$hearts)
# post
library(lubridate)
a <- "2020年"
post$category_dateTime[[2]] <- paste0(a, post$category_dateTime[[2]])
post$category_dateTime[[2]] <- ymd_hm(post$category_dateTime[[2]], tz="Asia/Taipei")
# post
library(lubridate)
a <- "2020年"
post$category_dateTime[[2]] <- paste0(a, post$category_dateTime[[2]])
post$category_dateTime[[2]] <- ymd_hm(post$category_dateTime[[2]], tz="Asia/Taipei")
# post
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr)
source("https://www.dropbox.com/s/tv16xt8mv11cli7/gujarati.R?dl=1")
print(receipts300[1:30]) # 印前30張
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
poem_song[[136]]<-poem_new
# poem_song
poem_song[[22]]$paragraphs[4]<-"喜聞何力語，應為樂秋豐。"
str(poem_song[[22]])
# poem_song
install.packages("rvest")
install.packages("rvest")
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
class(numerals_Gujarati)
sum(receipts300)
"૩"<-as.integer(3)
sum(receipts300)
"૩"<-as.integer(3)
"૪"<-as.integer(4)
sum(receipts300)
"૩"<-as.integer(3)
"૪"<-as.integer(4)
sum("૩","૪")
as.character(receipts300)
# sum300
poem_song[[136]]<-poem_new
# poem_song
poem_song[c(poem_songOrder)->poem_song
# poem_song
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
poem_song[[136]]<-poem_new
# poem_song
poem_song[[22]]$paragraphs[4]<-"喜聞何力語，應為樂秋豐。"
str(poem_song[[22]])
# poem_song
poem_song[c(poem_songOrder)]->poem_song
# poem_song
poem_song[[22]]$paragraphs[4]<-"喜聞何力語，應為樂秋豐。"
str(poem_song[[22]])
# poem_song
poem_song[[136]]<-poem_new
# poem_song
post$comments$gender <- as.factor(post$comments$gender)
post$comments$hearts <- as.integer(post$comments$hearts)
# post
View(poem_song)
post$comments$content[[26]] <- "心不在課堂上，在哪都做得到遠距。"
post$comments$hearts[[26]] <- 0
# post
as.integer(receipts300)
a
numerals_Gujarati[["૧"]]<-1
numerals_Gujarati[["૨"]]<-2
numerals_Gujarati[["૩"]]<-3
numerals_Gujarati[["૪"]]<-4
numerals_Gujarati[["૫"]]<-5
numerals_Gujarati[["૬"]]<-6
numerals_Gujarati[["૭"]]<-7
numerals_Gujarati[["૮"]]<-8
numerals_Gujarati[["૯"]]<-9
as.integer(numerals_Gujarati)
str(numerals_Gujarati)
# sum300
knitr::opts_chunk$set(echo = TRUE)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a %% b
a ** b
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)
sequenceNums %% 2 # 餘數為1則是奇數，0則是偶數
# a+b 即等於
c(2+4, 3+(-1), 5+3)
# a**b 即等於
c(2**4, 3**(-1), 5**3)
5*c(1,3,4)+7
# 其實是
c(5)*c(1,3,4)+c(7)
## 對向量5，向量7進行recycle:
c(5,5,5)*c(1,3,4)+c(7,7,7)
## Recycle等長後才進行elementwise operation:
c(5*1+7, 5*3+7, 5*4+7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
paste0(
c("我叫"), c("小明","小美")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(examplec[c(name,height)])
str(example[c(name,height)])
str(example[c("name","height")])
pick170<-example$height>=170
pick170<-example$height>=170
c(175,166,170,160)>=170
pick170<-example$height>=170
c(175,166,170,160)>=170
example$name[pick170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
table(transcript100to103$學屆)
table(transcript100to103$學屆)
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
table(transcript100to103$學屆)
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85人數
table(transcript100to103$學屆[pick_above85])
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")
example$name[pick_after98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
srt(exchangeRate)
str(exchangeRate)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$allowance <-
ordered(example$allowance)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
print(example[c("name","allowance")])
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
print(example[c("name","allowance")])
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
print(example[c("name","allowance")])
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
print(example[c("name","allowance")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
class(example$allowance)
example$allowance <-
ordered(example$allowance)
class(example$allowance)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
pick_above30 <-
list_victimAges_female$年齡層 >= "30_39歲"
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
list_victimAges_female$數目 <-
as.integer(list_victimAges_female$數目)
list_victimAges_female$年齡層 <-
as.factor(list_victimAges_female$年齡層)
View(list_victimAges_female$數目)
knitr::opts_chunk$set(echo = TRUE)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pickevens<-(sequenceNums%%2)==0
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pickevens<-(sequenceNums%%2)==0
sequenceNums(pickevens)
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pickevens<-(sequenceNums%%2)==0
sequenceNums[pickevens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
pick_law<-("法學院","商學院")
pick_law<-c("法學院","商學院")
level(factor(transcript100to103))
levels(factor(transcript100to103))
levels(factor(transcript100to103$學院))
pick_law<-c("法學院","商學院")
SET_LAW<-transcript100to103$學院%in%pick_law
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
is.na(x2)
is.na(x2)
sum(is.na(x2))
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
library(stringr)
library(stringr)
?str_detect
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
pick_pneumonia <- stringr::str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox$Question[pick_pneumonia]
knitr::opts_chunk$set(echo = TRUE)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
library(stringr)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
levels(covid19$性別)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
levels(covid19$年齡層)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
knitr::opts_chunk$set(echo = TRUE)
if(condition){
Body for TRUE
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
